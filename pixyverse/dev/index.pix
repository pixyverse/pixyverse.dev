from pixyverse.render_html.render import create_element
from pygments import highlight
from pygments.lexers import HtmlLexer, PythonLexer
from pygments.formatters import HtmlFormatter

inline_styles = """

.float_left {
    float: left;
}

.float_right {
    float: right;
}

a[rel=external] {
  padding-right: 1.25em;

}

a[rel=external]::after {
  position: absolute;
  content: '';
  display: inline-block;
  width: 1em;
  height: 1em;
  margin-left: 0.25em;
  background-size: 100%;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewbox='0 0 12.2 12.2' width='14' height='14'%3E%3Cpath d='M5.7 0v1.5h4L4.5 6.7l1 1.1 5.3-5.2v3.9h1.4V0z'/%3E%3Cpath fill='none' d='M3.4 6.7l3-2.9H1.5v7h7V5.9l-3 2.9z'/%3E%3Cpath d='M8.5 5.9v4.9h-7v-7h4.9l1.5-1.6H0v10h10V4.4z'/%3E%3C/svg%3E");
  transform: translateY(0.25em);
}
"""

def h_stack(tagName, props, children):
    gap = props['gap'] if 'gap' in props else 'initial'
    return <div style={f"'display: flex; gap: {gap}'"}>{children}</div>


def code_highlight(tagName, props, children):
    child_str = "".join(children)
    language = props['language']
    lexer = HtmlLexer()
    if language == "python":
        lexer = PythonLexer()
    return <pre><code>{(highlight(child_str, lexer, HtmlFormatter()))}</code></pre>

def link_to(tagName, props, children):
    isExternal = props.get('isExternal', False)
    return <a href={props["target"]} rel={'external' if isExternal else ''} target={'_blank' if isExternal else ''}>{children}</a>

doc = (
<html lang="en">
<head>
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width"/>
<title>"Pixyverse - JSX inspired component language natively embedded in python"</title>
<meta name="description" content="pixy is a transpiler that transpiles pixy files into regular python code. Pixy files are JSX inspired component description formats that brings markup style declarative language natively embedded in python."/>
<link rel="stylesheet" href="https://matcha.mizu.sh/matcha.css"/>
<link rel="apple-touch-icon-precomposed" sizes="57x57" href="static/favicon/apple-touch-icon-57x57.png" />
<link rel="apple-touch-icon-precomposed" sizes="114x114" href="static/favicon/apple-touch-icon-114x114.png" />
<link rel="apple-touch-icon-precomposed" sizes="72x72" href="static/favicon/apple-touch-icon-72x72.png" />
<link rel="apple-touch-icon-precomposed" sizes="144x144" href="static/favicon/apple-touch-icon-144x144.png" />
<link rel="apple-touch-icon-precomposed" sizes="60x60" href="static/favicon/apple-touch-icon-60x60.png" />
<link rel="apple-touch-icon-precomposed" sizes="120x120" href="static/favicon/apple-touch-icon-120x120.png" />
<link rel="apple-touch-icon-precomposed" sizes="76x76" href="static/favicon/apple-touch-icon-76x76.png" />
<link rel="apple-touch-icon-precomposed" sizes="152x152" href="static/favicon/apple-touch-icon-152x152.png" />
<link rel="icon" type="image/png" href="static/favicon/favicon-196x196.png" sizes="196x196" />
<link rel="icon" type="image/png" href="static/favicon/favicon-96x96.png" sizes="96x96" />
<link rel="icon" type="image/png" href="static/favicon/favicon-32x32.png" sizes="32x32" />
<link rel="icon" type="image/png" href="static/favicon/favicon-16x16.png" sizes="16x16" />
<link rel="icon" type="image/png" href="static/favicon/favicon-128.png" sizes="128x128" />
<meta name="msapplication-TileColor" content="#FFFFFF" />
<meta name="msapplication-TileImage" content="static/favicon/mstile-144x144.png" />
<meta name="msapplication-square70x70logo" content="static/favicon/mstile-70x70.png" />
<meta name="msapplication-square150x150logo" content="static/favicon/mstile-150x150.png" />
<meta name="msapplication-wide310x150logo" content="static/favicon/mstile-310x150.png" />
<meta name="msapplication-square310x310logo" content="static/favicon/mstile-310x310.png" />

<style>
{HtmlFormatter().get_style_defs('.highlight')}
{inline_styles}
</style>
</head>
<body class_="layout-simple">
<header>
    <h1><a href="/">"Pixy"</a></h1>
    <nav>
        <menu>
            <li><link_to isExternal={True} target="https://playground.pixyverse.dev">"Playground"</link_to></li>
            <li><link_to isExternal={True} target="https://pixyverse.github.io/render_html/">"Docs"</link_to></li>
            <li><link_to isExternal={True} target="https://github.com/pixyverse/render_html">"Code"</link_to></li>
            <li><link_to isExternal={True} target="https://discord.gg/xJSaZkGF">"Community"</link_to></li>
        </menu>
    </nav>
</header>
<main>

<section>
<header>
<link_to target="#what"><h2 id="what">"What"</h2></link_to>
</header>
<img src="static/imgs/pixy.webp" class_="float_right p-1" width="100px" height="100px" alt="Pixy Logo"/>
<p><link_to target="https://github.com/pixyverse/pixy" isExternal={True}>"Pixy"</link_to>"""
 refers to both code written in the Pixy language, an extension of Python that supports component syntax embedded in Python.
"""</p><p>"""
It also refers to the transpiler that transpiles Pixy language code into regular Python.
"""</p>

<h3>"Examples"</h3>
<h4>"Example Pixy Code"</h4>
<code_highlight language="html">"""
todo_page = (
    <div class_name="TodoList">
        <todo_list>
            <todo_item status={Status.Completed}>"Remember the milk"</todo_item>
            <todo_item status={Status.Todo}>"Buy a dozen eggs"</todo_item>
        </todo_list>
    </div>
    )
"""</code_highlight>

<h4>"Reusuable custom component function"</h4>
<code_highlight language="python">"""
def todo_list(tagName, props, children=[]):
    todos = props['todos']
    return (<ul class_="todo-list">
                {
                    [<todo_item todo={todo}/> for todo in todos]}
            </ul>)
"""</code_highlight>
</section>

<section>
<header>
<link_to target="#who"><h2 id="who">"Who"</h2></link_to>
</header>
<img src="static/imgs/who.webp" class_="float_left p-1" width="100px" height="100px" alt="Who"/>
<p>"Pixy is for anyone who wants to author components in HTML within the comforts of python. Since it transpiles to regular python it can be used with Flask, Django etc.."</p>

<p>"It could be used to make static sites like this one but with the benefit of writing it all in python."</p>

<p>"Or it could be used alongside "<link_to target="https://htmx.org" isExternal={True}>"HTMX"</link_to>" to build a dynamic website following "<link_to target="https://htmx.org/essays/hateoas/" isExternal={True}>"HATEOAS principles"</link_to>". A complete such example implementing TODOMVC can be found "<link_to target="https://github.com/pixyverse/todo_pixy?tab=readme-ov-file" isExternal={True}>"here."</link_to> </p>
</section>

<section>
<header>
<link_to target="#why"><h2 id="why">"Why"</h2></link_to>
</header>
<img src="static/imgs/features.webp" class_="float_right p-1" width="94px" height="100px" alt="Why"/>
<p>"The current state-of-the art way to generate HTML content is jinja2. Unfortunately components are not first class in it and there is a distinct DSL you need to learn to work with it. Logic programming and loops have their own constructs. Pixy allows you to stick with traditional python programming idioms making it a pleasure to work with"</p>

<p>"With type hints now gaining popularity Pixy can also bring proper typed components to UX development."</p>
</section>

<section>
<header>
<link_to target="#how"><h2 id="how">"How"</h2></link_to>
</header>

<img src="static/imgs/wand.webp" class_="float_left p-1" width="100px" height="100px" alt="How - Wand"/>
<p>"Pixy is "<link_to target="https://github.com/pixyverse/pixy/blob/develop/DESIGN.md" isExternal={True}>"designed"</link_to>" to stand "<link_to target="https://legacy.reactjs.org/docs/introducing-jsx.html" isExternal={True}>"on the shoulder of giants"</link_to>". It reuses the entire python compiler toolchain by extending the "<link_to target="https://github.com/we-like-parsers/pegen" isExternal={True}>"PEG grammar that Python"</link_to>" is built on. Thereby it does "<em>"Minimum Necessary Changes"</em>" to make components first class citizens in Python language."</p>
</section>

</main>
<footer>
<h6>"Designed with "<a href="https://github.com/pixyverse/pixy" isExternal={True}>"Pixy"</a>" by "<link_to target="https://pradeeproark.com">"Pradeep Roark"</link_to></h6>
</footer>
</body>
</html>
)
